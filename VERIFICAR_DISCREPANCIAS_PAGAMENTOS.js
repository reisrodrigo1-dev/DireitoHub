// Script para verificar e migrar pagamentos confirmados que est√£o faltando no sistema financeiro

import { 
  collection, 
  getDocs, 
  query, 
  where, 
  doc, 
  getDoc 
} from 'firebase/firestore';
import { db } from '../firebase/config';
import { financialService } from '../firebase/firestore';

// Fun√ß√£o para verificar discrep√¢ncias entre agendamentos pagos e registros financeiros
export const checkPaymentDiscrepancies = async (lawyerId) => {
  console.log('üîç Verificando discrep√¢ncias de pagamentos para advogado:', lawyerId);
  
  try {
    // 1. Buscar agendamentos pagos
    const appointmentsQuery = query(
      collection(db, 'appointments'),
      where('lawyerId', '==', lawyerId),
      where('status', 'in', ['pago', 'confirmado', 'finalizado'])
    );
    
    const appointmentsSnapshot = await getDocs(appointmentsQuery);
    console.log(`üìã Agendamentos pagos encontrados: ${appointmentsSnapshot.size}`);
    
    const paidAppointments = [];
    appointmentsSnapshot.forEach(doc => {
      const data = doc.data();
      paidAppointments.push({
        id: doc.id,
        ...data,
        appointmentDate: data.appointmentDate?.toDate?.() || new Date(data.appointmentDate),
        paymentConfirmed: data.paymentConfirmed?.toDate?.() || (data.paymentConfirmed ? new Date(data.paymentConfirmed) : null)
      });
    });
    
    // 2. Buscar registros financeiros
    const paymentsResult = await financialService.getPaymentHistory(lawyerId);
    console.log(`üí∞ Registros financeiros encontrados: ${paymentsResult.success ? paymentsResult.data.length : 0}`);
    
    if (!paymentsResult.success) {
      console.error('‚ùå Erro ao buscar registros financeiros:', paymentsResult.error);
      return;
    }
    
    const financialRecords = paymentsResult.data;
    
    // 3. Identificar agendamentos sem registro financeiro
    const missingPayments = paidAppointments.filter(appointment => {
      return !financialRecords.some(payment => payment.appointmentId === appointment.id);
    });
    
    console.log(`üîç AN√ÅLISE DETALHADA:`);
    console.log(`üìä Total agendamentos pagos: ${paidAppointments.length}`);
    console.log(`üí∞ Total registros financeiros: ${financialRecords.length}`);
    console.log(`‚ùå Agendamentos sem registro financeiro: ${missingPayments.length}`);
    
    // 4. Mostrar detalhes dos agendamentos pagos
    console.log('\nüìã AGENDAMENTOS PAGOS:');
    paidAppointments.forEach(apt => {
      console.log(`- ${apt.id}: ${apt.clientName} - R$ ${apt.finalPrice} - Status: ${apt.status}`);
    });
    
    // 5. Mostrar detalhes dos registros financeiros
    console.log('\nüí∞ REGISTROS FINANCEIROS:');
    financialRecords.forEach(payment => {
      console.log(`- ${payment.id}: ${payment.clientName} - R$ ${payment.amount} - Appointment: ${payment.appointmentId}`);
    });
    
    // 6. Mostrar agendamentos que precisam ser migrados
    if (missingPayments.length > 0) {
      console.log('\n‚ùå AGENDAMENTOS SEM REGISTRO FINANCEIRO:');
      missingPayments.forEach(apt => {
        console.log(`- ${apt.id}: ${apt.clientName} - R$ ${apt.finalPrice} - Status: ${apt.status} - Data: ${apt.appointmentDate?.toLocaleDateString()}`);
      });
      
      console.log('\nüîß Para corrigir, execute: migrateSpecificPayments()');
    } else {
      console.log('\n‚úÖ Todos os agendamentos pagos t√™m registros financeiros correspondentes!');
    }
    
    return {
      paidAppointments: paidAppointments.length,
      financialRecords: financialRecords.length,
      missingPayments: missingPayments.length,
      missing: missingPayments
    };
    
  } catch (error) {
    console.error('üí• Erro ao verificar discrep√¢ncias:', error);
    return null;
  }
};

// Fun√ß√£o para migrar agendamentos espec√≠ficos que est√£o faltando
export const migrateSpecificPayments = async (lawyerId) => {
  console.log('üîÑ Iniciando migra√ß√£o de pagamentos espec√≠ficos...');
  
  try {
    const analysis = await checkPaymentDiscrepancies(lawyerId);
    if (!analysis || analysis.missingPayments === 0) {
      console.log('‚úÖ N√£o h√° pagamentos para migrar!');
      return;
    }
    
    const confirmed = confirm(
      `Foram encontrados ${analysis.missingPayments} agendamentos pagos sem registro financeiro.\n\n` +
      `Deseja migrar estes pagamentos agora?`
    );
    
    if (!confirmed) {
      console.log('‚ùå Migra√ß√£o cancelada pelo usu√°rio');
      return;
    }
    
    let migratedCount = 0;
    let errorCount = 0;
    
    for (const appointment of analysis.missing) {
      try {
        const financialData = {
          appointmentId: appointment.id,
          clientId: appointment.clientId || '',
          clientName: appointment.clientName || 'Cliente n√£o informado',
          clientEmail: appointment.clientEmail || '',
          amount: appointment.finalPrice || 0,
          serviceDescription: 'Consulta jur√≠dica (migra√ß√£o)',
          transactionId: appointment.transactionId || `MIGRATED_${appointment.id}`
        };
        
        const result = await financialService.recordPayment(lawyerId, financialData);
        
        if (result.success) {
          console.log(`‚úÖ Migrado: ${appointment.clientName} - R$ ${appointment.finalPrice}`);
          migratedCount++;
        } else {
          console.error(`‚ùå Erro ao migrar ${appointment.id}:`, result.error);
          errorCount++;
        }
        
      } catch (error) {
        console.error(`üí• Erro ao processar agendamento ${appointment.id}:`, error);
        errorCount++;
      }
    }
    
    console.log('\nüìä RELAT√ìRIO DA MIGRA√á√ÉO:');
    console.log(`‚úÖ Migrados: ${migratedCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);
    
    // Verificar novamente ap√≥s a migra√ß√£o
    console.log('\nüîç Verificando resultado...');
    await checkPaymentDiscrepancies(lawyerId);
    
    alert(`Migra√ß√£o conclu√≠da!\n\nMigrados: ${migratedCount}\nErros: ${errorCount}`);
    
    return {
      migrated: migratedCount,
      errors: errorCount
    };
    
  } catch (error) {
    console.error('üí• Erro durante a migra√ß√£o:', error);
    alert(`Erro durante a migra√ß√£o: ${error.message}`);
  }
};

// Fun√ß√£o autom√°tica para executar a verifica√ß√£o com o usu√°rio logado
export const autoCheckCurrentUser = async () => {
  try {
    // Tentar obter o usu√°rio do contexto
    const userContext = window.React?.useContext?.();
    let userId = null;
    
    // M√©todo alternativo: buscar no localStorage
    const authData = localStorage.getItem('authUser');
    if (authData) {
      const parsed = JSON.parse(authData);
      userId = parsed.uid;
    }
    
    // M√©todo alternativo 2: buscar no Firebase Auth atual
    if (!userId && window.firebase?.auth?.().currentUser) {
      userId = window.firebase.auth().currentUser.uid;
    }
    
    if (!userId) {
      console.error('‚ùå N√£o foi poss√≠vel identificar o usu√°rio logado');
      console.log('üí° Execute manualmente: checkPaymentDiscrepancies("SEU_USER_ID")');
      return;
    }
    
    console.log('üë§ Usu√°rio identificado:', userId);
    return await checkPaymentDiscrepancies(userId);
    
  } catch (error) {
    console.error('üí• Erro ao identificar usu√°rio:', error);
    console.log('üí° Execute manualmente: checkPaymentDiscrepancies("SEU_USER_ID")');
  }
};

// Instru√ß√µes de uso
console.log(`
üîç VERIFICA√á√ÉO DE DISCREP√ÇNCIAS NO SISTEMA FINANCEIRO

Para usar estes scripts:

1. Abra o Console do navegador (F12)
2. V√° para a p√°gina do dashboard do advogado
3. Execute um dos comandos:

   // Verifica√ß√£o autom√°tica (tenta identificar usu√°rio logado)
   autoCheckCurrentUser()
   
   // Verifica√ß√£o manual (substitua pelo ID do advogado)
   checkPaymentDiscrepancies("ID_DO_ADVOGADO")
   
   // Migra√ß√£o dos pagamentos faltantes
   migrateSpecificPayments("ID_DO_ADVOGADO")

4. Siga as instru√ß√µes mostradas no console

Este script ir√°:
‚úÖ Comparar agendamentos pagos com registros financeiros
‚úÖ Identificar discrep√¢ncias 
‚úÖ Migrar automaticamente os pagamentos faltantes
‚úÖ Validar o resultado da migra√ß√£o
`);

export { checkPaymentDiscrepancies, migrateSpecificPayments, autoCheckCurrentUser };
