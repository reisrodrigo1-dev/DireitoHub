/**
 * PATCH TEMPOR√ÅRIO PARA RESOLVER O ERRO DA R√âPLICA
 * 
 * Este patch adiciona verifica√ß√µes robustas e fallbacks
 * para garantir que o fluxo da R√©plica funcione corretamente
 */

// Fun√ß√£o para verificar se o servi√ßo est√° funcionando
export const verifyReplicaService = () => {
  try {
    // Tentar importar diretamente
    const replicaService = require('./replicaWorkflowService');
    
    if (!replicaService || !replicaService.replicaWorkflowService) {
      console.log('‚ùå replicaWorkflowService n√£o encontrado no import');
      return {
        valid: false,
        error: 'Servi√ßo n√£o encontrado no import',
        fallback: false // SEMPRE tentar usar o servi√ßo principal primeiro
      };
    }
    
    const service = replicaService.replicaWorkflowService;
    
    // Verificar m√©todos essenciais
    const requiredMethods = [
      'initializeWorkflow',
      'processDocuments', 
      'getCurrentState',
      'processUserConfirmation',
      'generateSectionPrompt'
    ];
    
    const missingMethods = requiredMethods.filter(method => 
      typeof service[method] !== 'function'
    );
    
    if (missingMethods.length > 0) {
      console.log('‚ùå M√©todos ausentes no servi√ßo:', missingMethods);
      return {
        valid: false,
        error: `M√©todos ausentes: ${missingMethods.join(', ')}`,
        fallback: false // Tentar usar o servi√ßo mesmo assim
      };
    }
    
    console.log('‚úÖ Servi√ßo da R√©plica verificado com sucesso');
    return {
      valid: true,
      service: service,
      detector: replicaService.shouldUseReplicaWorkflow
    };
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar servi√ßo da R√©plica:', error);
    return {
      valid: false,
      error: error.message,
      fallback: false // N√ÉO usar fallback por padr√£o
    };
  }
};

// Fallback simplificado para quando o servi√ßo principal falha
export const replicaFallbackService = {
  processDocuments: (documents) => {
    if (!documents || documents.length === 0) {
      return {
        success: false,
        message: '‚ö†Ô∏è **Documentos ainda n√£o foram anexados**\n\nPor favor, anexe os documentos obrigat√≥rios (peti√ß√£o inicial, contesta√ß√£o, etc.) antes de prosseguir.'
      };
    }
    
    return {
      success: true,
      message: `‚úÖ ${documents.length} documento(s) processado(s). O sistema est√° funcionando em modo simplificado. Prossiga com "SIM".`
    };
  },
  
  getCurrentState: () => ({
    currentSection: 0,
    completedSections: [],
    documentsProcessed: true,
    documentsContent: 'Processado em modo fallback',
    sectionContents: {},
    userConfirmations: {}
  }),
  
  processUserConfirmation: (userInput) => {
    const confirmations = ['sim', 'confirmo', 'ok', 'confirmar', 'continuar', 'prosseguir'];
    const isConfirmed = confirmations.some(word => userInput.includes(word));
    
    return {
      confirmed: isConfirmed,
      message: isConfirmed ? 
        'Confirma√ß√£o recebida. Gerando r√©plica em modo simplificado...' :
        'Por favor, confirme digitando "SIM" para prosseguir.'
    };
  },
  
  generateSectionPrompt: () => {
    return `
Voc√™ √© um especialista em Direito e est√° elaborando uma R√âPLICA JUR√çDICA.

INSTRU√á√ïES GERAIS:
- Elabore uma r√©plica completa e fundamentada
- Use linguagem jur√≠dica formal
- Estruture em se√ß√µes organizadas (Relat√≥rio, Pontos Controvertidos, Refuta√ß√£o, Pedidos)
- Base-se nos documentos que foram anexados pelo usu√°rio
- Seja preciso, objetivo e t√©cnico

CONTEXTO:
O usu√°rio anexou documentos (peti√ß√£o inicial, contesta√ß√£o, etc.) e precisa de uma r√©plica bem estruturada.

ESTRUTURA SUGERIDA:
I ‚Äì DO RELAT√ìRIO
II ‚Äì DOS PONTOS CONTROVERTIDOS  
III ‚Äì DA REFUTA√á√ÉO DOS ARGUMENTOS DA CONTESTA√á√ÉO
IV ‚Äì DOS PEDIDOS

Elabore agora uma r√©plica completa e bem fundamentada:
    `.trim();
  }
};

// Fun√ß√£o principal com fallback integrado
export const handleReplicaWorkflowWithFallback = async (userMessage, state, dependencies) => {
  console.log('üõ°Ô∏è Executando handleReplicaWorkflow com fallback integrado');
  
  const { replicaPhase, attachedDocuments, setReplicaPhase, setReplicaState, replicaState } = state;
  const { sendMessageToAI } = dependencies;
  
  try {
    // PRIMEIRO: Tentar usar o servi√ßo principal importado diretamente
    let service = null;
    let useFallback = false;
    
    try {
      const { replicaWorkflowService } = require('./replicaWorkflowService');
      if (replicaWorkflowService && typeof replicaWorkflowService.processDocuments === 'function') {
        service = replicaWorkflowService;
        console.log('‚úÖ Usando servi√ßo principal da R√©plica');
      } else {
        throw new Error('Servi√ßo principal n√£o dispon√≠vel');
      }
    } catch (serviceError) {
      console.warn('‚ö†Ô∏è Servi√ßo principal falhou, usando fallback:', serviceError.message);
      service = replicaFallbackService;
      useFallback = true;
    }
    
    const userInput = userMessage.content.toLowerCase().trim();
    
    // Fase de upload de documentos
    if (replicaPhase === 'document_upload') {
      console.log('üìÑ Processando documentos...');
      
      const processResult = service.processDocuments(attachedDocuments);
      
      if (processResult.success) {
        setReplicaPhase('section_work');
        if (!useFallback && service.getCurrentState) {
          setReplicaState(service.getCurrentState());
        }
        return {
          success: true,
          message: processResult.message + (useFallback ? '\n\n‚ö†Ô∏è Sistema em modo simplificado.' : '')
        };
      } else {
        return {
          success: true,
          message: processResult.message
        };
      }
    }
    
    // Fase de trabalho em se√ß√µes  
    if (replicaPhase === 'section_work') {
      console.log('üîß Processando confirma√ß√£o...');
      
      const confirmation = service.processUserConfirmation(userInput, replicaState?.currentSection || 0);
      
      if (confirmation.confirmed) {
        console.log('‚úÖ Confirma√ß√£o recebida, gerando r√©plica...');
        
        let prompt;
        if (!useFallback && service.generateSectionPrompt) {
          // Usar prompt espec√≠fico do servi√ßo principal
          const sectionIndex = replicaState?.currentSection || 0;
          prompt = service.generateSectionPrompt(sectionIndex);
        } else {
          // Usar prompt b√°sico do fallback MAS com documentos reais
          prompt = generateAdvancedReplicaPrompt(attachedDocuments);
        }
        
        console.log('üìù Prompt gerado:', {
          length: prompt.length,
          useFallback,
          documentsCount: attachedDocuments.length
        });
        
        try {
          // Formatar prompt como mensagem para a IA
          const aiMessages = [
            {
              role: 'user',
              content: prompt
            }
          ];
          
          console.log('üì§ Enviando prompt para IA:', {
            messageLength: prompt.length,
            documentsCount: attachedDocuments.length
          });
          
          const aiResponse = await sendMessageToAI(aiMessages);
          
          if (aiResponse && aiResponse.success && aiResponse.message) {
            console.log('‚úÖ IA respondeu com sucesso:', {
              responseLength: aiResponse.message.length,
              hasContent: aiResponse.message.length > 100
            });
            
            return {
              success: true,
              message: aiResponse.message + '\n\n‚úÖ **R√©plica elaborada com sucesso!**'
            };
          } else {
            console.error('‚ùå Resposta da IA inv√°lida:', aiResponse);
            throw new Error('Resposta da IA inv√°lida ou vazia');
          }
          
        } catch (aiError) {
          console.warn('‚ùå Erro na IA:', aiError.message);
          
          return {
            success: true,
            message: `‚ùå Erro ao comunicar com a IA: ${aiError.message}\n\nTente novamente ou verifique sua conex√£o.`
          };
        }
      } else {
        return {
          success: true,
          message: confirmation.message
        };
      }
    }
    
    // Estado inv√°lido
    return {
      success: true,
      message: '‚ùå Estado inv√°lido do fluxo. Digite "SIM" para continuar ou recarregue a p√°gina.'
    };
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no fluxo da R√©plica:', error);
    
    return {
      success: true,
      message: `‚ùå Erro no processamento: ${error.message}\n\nTente recarregar a p√°gina ou entre em contato com o suporte.\n\nüîß **Solu√ß√£o tempor√°ria**: Digite "GERAR" para tentar o fluxo normal.`
    };
  }
};

// Fun√ß√£o para gerar prompt avan√ßado com documentos reais
function generateAdvancedReplicaPrompt(documents) {
  let documentsText = '';
  if (documents && documents.length > 0) {
    documentsText = documents.map((doc, index) => 
      `=== DOCUMENTO ${index + 1}: ${doc.name || doc.fileName} ===\nTIPO: ${doc.fileType?.toUpperCase() || 'TXT'}\nTAMANHO: ${Math.round(doc.content?.length / 1000) || 0}k caracteres\n\nCONTE√öDO COMPLETO:\n${doc.content}\n\n`
    ).join('');
  }

  return `Voc√™ √© um assistente jur√≠dico especializado em elabora√ß√£o de r√©plicas processuais.

**IMPORTANTE: ELABORE CONTE√öDO COMPLETO E ESPEC√çFICO, N√ÉO APENAS ESTRUTURA OU MODELO**

**TAREFA:** Elaborar uma R√âPLICA JUR√çDICA COMPLETA baseada nos documentos anexados.

**TODOS OS DOCUMENTOS ANEXADOS PARA AN√ÅLISE:**
${documentsText}

**ESTRUTURA OBRIGAT√ìRIA:**

I ‚Äì DO RELAT√ìRIO
- Resumir os fatos da peti√ß√£o inicial
- Resumir os argumentos da contesta√ß√£o
- Identificar cronologia dos fatos

II ‚Äì DOS PONTOS CONTROVERTIDOS
- Identificar quest√µes de fato em disputa
- Identificar quest√µes de direito em disputa
- Delimitar objeto da lide

III ‚Äì DA REFUTA√á√ÉO DOS ARGUMENTOS DA CONTESTA√á√ÉO
- Analisar cada argumento da contesta√ß√£o
- Refutar argumentos defensivos
- Demonstrar inconsist√™ncias
- Refor√ßar argumentos da inicial

IV ‚Äì DOS PEDIDOS
- Reiterar pedidos da inicial
- Fundamentar proced√™ncia
- Incluir pedidos processuais

**INSTRU√á√ïES ESPEC√çFICAS:**
‚Ä¢ Analise TODOS os ${documents?.length || 0} documentos anexados
‚Ä¢ Use informa√ß√µes ESPEC√çFICAS dos documentos (nomes, valores, datas, fatos)
‚Ä¢ Cross-reference informa√ß√µes entre os documentos
‚Ä¢ Use linguagem jur√≠dica formal e t√©cnica
‚Ä¢ Nomes de pessoas em MAI√öSCULAS
‚Ä¢ Base-se exclusivamente nos documentos fornecidos
‚Ä¢ Seja espec√≠fico e fundamentado
‚Ä¢ N√ÉO use jurisprud√™ncia gen√©rica
‚Ä¢ Elabore conte√∫do substancial para cada se√ß√£o
‚Ä¢ ELABORE TEXTO COMPLETO, N√ÉO APENAS T√ìPICOS OU ESTRUTURA

**CR√çTICO:** Elabore uma r√©plica COMPLETA e DETALHADA com base nos fatos espec√≠ficos dos documentos anexados, N√ÉO retorne apenas estrutura, modelo ou t√≥picos.

Elabore agora a r√©plica jur√≠dica completa:`;
}

export default {
  verifyReplicaService,
  replicaFallbackService,
  handleReplicaWorkflowWithFallback
};
