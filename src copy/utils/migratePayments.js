// Script de migra√ß√£o para converter agendamentos pagos existentes 
// para registros no sistema financeiro

import { 
  collection, 
  getDocs, 
  query, 
  where, 
  doc, 
  getDoc 
} from 'firebase/firestore';
import { db } from '../firebase/config';
import { financialService } from '../firebase/firestore';

export const migrateExistingPayments = async () => {
  console.log('üîÑ Iniciando migra√ß√£o de pagamentos existentes...');
  
  try {
    // Buscar todos os agendamentos pagos
    const appointmentsQuery = query(
      collection(db, 'appointments'),
      where('status', '==', 'pago')
    );
    
    const appointmentsSnapshot = await getDocs(appointmentsQuery);
    console.log(`üìã Encontrados ${appointmentsSnapshot.size} agendamentos pagos`);
    
    let migratedCount = 0;
    let skippedCount = 0;
    let errorCount = 0;
    
    for (const appointmentDoc of appointmentsSnapshot.docs) {
      const appointmentData = appointmentDoc.data();
      const appointmentId = appointmentDoc.id;
      
      try {
        // Verificar se j√° existe registro financeiro para este agendamento
        const existingPayments = await financialService.getPaymentHistory(appointmentData.lawyerId);
        const alreadyExists = existingPayments.success && 
          existingPayments.data.some(payment => payment.appointmentId === appointmentId);
        
        if (alreadyExists) {
          console.log(`‚è≠Ô∏è Agendamento ${appointmentId} j√° migrado, pulando...`);
          skippedCount++;
          continue;
        }
        
        // Criar registro financeiro
        const financialData = {
          appointmentId: appointmentId,
          clientId: appointmentData.clientId || '',
          clientName: appointmentData.clientName || 'Cliente n√£o informado',
          clientEmail: appointmentData.clientEmail || '',
          amount: appointmentData.finalPrice || 0,
          serviceDescription: 'Consulta jur√≠dica (migra√ß√£o)',
          transactionId: appointmentData.transactionId || `MIGRATED_${appointmentId}`
        };
        
        const result = await financialService.recordPayment(appointmentData.lawyerId, financialData);
        
        if (result.success) {
          console.log(`‚úÖ Migrado agendamento ${appointmentId} - R$ ${appointmentData.finalPrice}`);
          migratedCount++;
        } else {
          console.error(`‚ùå Erro ao migrar ${appointmentId}:`, result.error);
          errorCount++;
        }
        
      } catch (error) {
        console.error(`üí• Erro ao processar agendamento ${appointmentId}:`, error);
        errorCount++;
      }
    }
    
    console.log('\nüìä RELAT√ìRIO DA MIGRA√á√ÉO:');
    console.log(`‚úÖ Migrados: ${migratedCount}`);
    console.log(`‚è≠Ô∏è Pulados (j√° existiam): ${skippedCount}`);
    console.log(`‚ùå Erros: ${errorCount}`);
    console.log(`üìã Total processados: ${appointmentsSnapshot.size}`);
    
    return {
      success: true,
      migrated: migratedCount,
      skipped: skippedCount,
      errors: errorCount,
      total: appointmentsSnapshot.size
    };
    
  } catch (error) {
    console.error('üí• Erro geral durante a migra√ß√£o:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Fun√ß√£o para executar a migra√ß√£o com confirma√ß√£o
export const runMigrationWithConfirmation = async () => {
  const confirmed = confirm(
    'Esta opera√ß√£o ir√° migrar todos os agendamentos pagos existentes para o sistema financeiro.\n\n' +
    'Tem certeza de que deseja continuar?\n\n' +
    'ATEN√á√ÉO: Execute esta opera√ß√£o apenas uma vez!'
  );
  
  if (!confirmed) {
    console.log('‚ùå Migra√ß√£o cancelada pelo usu√°rio');
    return;
  }
  
  const result = await migrateExistingPayments();
  
  if (result.success) {
    alert(`Migra√ß√£o conclu√≠da!\n\nMigrados: ${result.migrated}\nPulados: ${result.skipped}\nErros: ${result.errors}`);
  } else {
    alert(`Erro durante a migra√ß√£o: ${result.error}`);
  }
  
  return result;
};

// Instru√ß√µes de uso
console.log(`
MIGRA√á√ÉO DE PAGAMENTOS EXISTENTES

Para executar a migra√ß√£o:

1. Abra o Console do navegador (F12)
2. V√° para a p√°gina do dashboard do advogado
3. Execute: runMigrationWithConfirmation()

Esta migra√ß√£o ir√°:
- Buscar todos os agendamentos com status 'pago'
- Criar registros correspondentes na cole√ß√£o 'payments'
- Evitar duplicatas verificando se j√° existe registro
- Mostrar relat√≥rio detalhado do processo

IMPORTANTE: Execute apenas uma vez!
`);
