// Servi√ßo especializado para o fluxo de trabalho da R√©plica
// Implementa o fluxo sequencial e controlado conforme especifica√ß√µes t√©cnicas

export class ReplicaWorkflowService {
  constructor() {
    // Se√ß√µes obrigat√≥rias da R√©plica conforme estrutura legal
    this.SECTIONS = [
      {
        id: 'relatorio',
        title: 'I ‚Äì DO RELAT√ìRIO',
        description: 'Relat√≥rio dos fatos e do procedimento',
        minTokens: 200,
        maxTokens: 800,
        requirements: [
          'Resumo dos fatos da peti√ß√£o inicial',
          'Resumo da contesta√ß√£o apresentada',
          'Pontos principais em disputa',
          'Cronologia dos fatos relevantes'
        ]
      },
      {
        id: 'pontos_controvertidos',
        title: 'II ‚Äì DOS PONTOS CONTROVERTIDOS',
        description: 'Identifica√ß√£o e delimita√ß√£o dos pontos controvertidos',
        minTokens: 300,
        maxTokens: 1000,
        requirements: [
          'Identifica√ß√£o clara de cada ponto controvertido',
          'Separa√ß√£o entre quest√µes de fato e de direito',
          'Delimita√ß√£o do objeto da lide',
          'Quest√µes n√£o contestadas (pontos incontroversos)'
        ]
      },
      {
        id: 'refutacao_argumentos',
        title: 'III ‚Äì DA REFUTA√á√ÉO DOS ARGUMENTOS DA CONTESTA√á√ÉO',
        description: 'Refuta√ß√£o fundamentada dos argumentos defensivos',
        minTokens: 800,
        maxTokens: 2000,
        requirements: [
          'An√°lise de cada argumento da contesta√ß√£o',
          'Contra-argumenta√ß√£o fundamentada',
          'Demonstra√ß√£o da inconsist√™ncia dos argumentos defensivos',
          'Refor√ßo dos argumentos da peti√ß√£o inicial',
          'Jurisprud√™ncia aplic√°vel (se necess√°ria)'
        ]
      },
      {
        id: 'pedidos',
        title: 'IV ‚Äì DOS PEDIDOS',
        description: 'Reitera√ß√£o e eventual amplia√ß√£o dos pedidos',
        minTokens: 200,
        maxTokens: 600,
        requirements: [
          'Reitera√ß√£o dos pedidos da peti√ß√£o inicial',
          'Fundamenta√ß√£o da proced√™ncia dos pedidos',
          'Pedidos relativos √†s despesas processuais',
          'Pedidos alternativos ou subsidi√°rios (se aplic√°veis)'
        ]
      }
    ];

    // Estado do fluxo de trabalho
    this.workflowState = {
      currentSection: 0,
      completedSections: [],
      documentsProcessed: false,
      documentsContent: null,
      sectionContents: {},
      userConfirmations: {}
    };

    // Configura√ß√µes do fluxo
    this.CONFIG = {
      requireDocuments: true,
      allowSkipSections: false,
      allowReorderSections: false,
      enforceMinTokens: true,
      enforceUppercaseNames: true,
      prohibitJurisprudence: true, // Por padr√£o, n√£o incluir jurisprud√™ncia a menos que necess√°rio
      requireUserConfirmation: true
    };
  }

  // Inicializar o fluxo da R√©plica
  initializeWorkflow() {
    this.workflowState = {
      currentSection: 0,
      completedSections: [],
      documentsProcessed: false,
      documentsContent: null,
      sectionContents: {},
      userConfirmations: {}
    };

    return {
      phase: 'document_upload',
      message: this.getDocumentUploadMessage(),
      nextStep: 'upload_documents'
    };
  }

  // Mensagem de upload de documentos
  getDocumentUploadMessage() {
    return `üìù **ELABORA√á√ÉO DE R√âPLICA - FLUXO SEQUENCIAL**

Para elaborar uma r√©plica tecnicamente adequada, seguiremos um processo estruturado em 4 se√ß√µes obrigat√≥rias:

**I ‚Äì DO RELAT√ìRIO**
**II ‚Äì DOS PONTOS CONTROVERTIDOS** 
**III ‚Äì DA REFUTA√á√ÉO DOS ARGUMENTOS DA CONTESTA√á√ÉO**
**IV ‚Äì DOS PEDIDOS**

**üìã DOCUMENTOS NECESS√ÅRIOS:**
- Peti√ß√£o inicial completa
- Contesta√ß√£o da parte contr√°ria  
- Documentos juntados pela defesa (se houver)
- Provas e anexos relevantes (se houver)
- **M√°ximo: 10 documentos**

**üìÑ FORMATOS ACEITOS:**
- Arquivos de texto (.txt) - RECOMENDADO
- Documentos Word (.docx) - RECOMENDADO  
- Arquivos PDF (.pdf) - Aceito (extra√ß√£o limitada)
- Tamanho m√°ximo: 10MB por arquivo

**üí° DICA IMPORTANTE:**
Para melhor resultado, prefira arquivos .txt ou .docx. 
PDFs s√£o aceitos mas podem ter extra√ß√£o de texto limitada.
Voc√™ pode anexar m√∫ltiplos documentos - todos ser√£o analisados em conjunto.

**‚ö†Ô∏è IMPORTANTE:**
- O processo ser√° sequencial (n√£o √© poss√≠vel pular se√ß√µes)
- Cada se√ß√£o ser√° elaborada ap√≥s sua confirma√ß√£o
- Todos os nomes ser√£o apresentados em MAI√öSCULAS
- M√≠nimo de tokens por se√ß√£o ser√° respeitado
- N√£o ser√° inclu√≠da jurisprud√™ncia desnecess√°ria

Por favor, **anexe todos os documentos necess√°rios** para iniciarmos o processo.`;
  }

  // Processar documentos carregados
  processDocuments(documents) {
    console.log('üîç ReplicaWorkflow.processDocuments chamado:', {
      documentsCount: documents?.length || 0,
      documentsType: typeof documents,
      hasDocuments: !!documents
    });

    if (!documents || documents.length === 0) {
      console.log('‚ùå Nenhum documento fornecido');
      return {
        success: false,
        message: 'Nenhum documento foi anexado. Por favor, anexe os documentos obrigat√≥rios para prosseguir.'
      };
    }

    console.log('üìÑ Documentos recebidos:', documents.map((doc, index) => ({
      index: index + 1,
      name: doc.name,
      hasContent: !!doc.content,
      contentLength: doc.content?.length || 0,
      fileType: doc.fileType || 'unknown'
    })));

    // Verificar se h√° documentos essenciais
    const hasContestation = documents.some(doc => 
      doc.name.toLowerCase().includes('contesta√ß√£o') || 
      doc.name.toLowerCase().includes('contestacao') ||
      doc.content.toLowerCase().includes('contesta√ß√£o') ||
      doc.content.toLowerCase().includes('contestacao') ||
      doc.content.toLowerCase().includes('defesa') ||
      doc.content.toLowerCase().includes('resposta')
    );

    const hasPetition = documents.some(doc => 
      doc.name.toLowerCase().includes('inicial') || 
      doc.name.toLowerCase().includes('peti√ß√£o') ||
      doc.name.toLowerCase().includes('peticao') ||
      doc.content.toLowerCase().includes('peti√ß√£o inicial') ||
      doc.content.toLowerCase().includes('peticao inicial') ||
      doc.content.toLowerCase().includes('exordial')
    );

    console.log('üîç Valida√ß√£o de documentos:', {
      totalDocuments: documents.length,
      hasContestation,
      hasPetition,
      documentsNames: documents.map(d => d.name)
    });

    // Classificar documentos por tipo (para melhor organiza√ß√£o)
    const classifiedDocs = {
      petition: documents.filter(doc => 
        doc.name.toLowerCase().includes('inicial') || 
        doc.name.toLowerCase().includes('peti√ß√£o') ||
        doc.name.toLowerCase().includes('peticao') ||
        doc.content.toLowerCase().includes('peti√ß√£o inicial')
      ),
      contestation: documents.filter(doc => 
        doc.name.toLowerCase().includes('contesta√ß√£o') || 
        doc.name.toLowerCase().includes('contestacao') ||
        doc.content.toLowerCase().includes('contesta√ß√£o')
      ),
      evidence: documents.filter(doc => 
        doc.name.toLowerCase().includes('prova') || 
        doc.name.toLowerCase().includes('documento') ||
        doc.name.toLowerCase().includes('anexo')
      ),
      others: documents.filter(doc => 
        !doc.name.toLowerCase().includes('inicial') && 
        !doc.name.toLowerCase().includes('contesta√ß√£o') &&
        !doc.name.toLowerCase().includes('contestacao') &&
        !doc.name.toLowerCase().includes('prova')
      )
    };

    console.log('üìÇ Classifica√ß√£o dos documentos:', {
      petition: classifiedDocs.petition.length,
      contestation: classifiedDocs.contestation.length,
      evidence: classifiedDocs.evidence.length,
      others: classifiedDocs.others.length
    });

    if (!hasContestation) {
      console.log('‚ùå Contesta√ß√£o n√£o encontrada');
      return {
        success: false,
        message: `‚ö†Ô∏è **Contesta√ß√£o n√£o encontrada**\n\nPor favor, anexe o documento da contesta√ß√£o da parte contr√°ria. Este documento √© essencial para elaborar a r√©plica.\n\nüìÑ **Documentos anexados (${documents.length}):**\n${documents.map((doc, i) => `${i + 1}. ${doc.name}`).join('\n')}\n\nVoc√™ pode anexar mais documentos ou renomear um dos existentes para incluir "contesta√ß√£o" no nome.`
      };
    }

    // Armazenar conte√∫do dos documentos com classifica√ß√£o
    this.workflowState.documentsContent = documents;
    this.workflowState.classifiedDocuments = classifiedDocs;
    this.workflowState.documentsProcessed = true;

    console.log('‚úÖ Documentos processados com sucesso');

    const documentSummary = documents.map((doc, i) => 
      `${i + 1}. **${doc.name}** (${doc.fileType?.toUpperCase() || 'TXT'}, ${Math.round(doc.content?.length / 1000) || 0}k chars)`
    ).join('\n');

    return {
      success: true,
      message: `‚úÖ **${documents.length} documento(s) processado(s) com sucesso!**

üìÇ **Documentos analisados:**
${documentSummary}

üîç **Classifica√ß√£o autom√°tica:**
- üìã Peti√ß√µes iniciais: ${classifiedDocs.petition.length}
- üõ°Ô∏è Contesta√ß√µes/Defesas: ${classifiedDocs.contestation.length}
- üìé Provas/Anexos: ${classifiedDocs.evidence.length}
- üìÑ Outros documentos: ${classifiedDocs.others.length}

${this.getStartSectionMessage()}`,
      phase: 'section_work',
      nextStep: 'start_first_section'
    };
  }

  // Mensagem para iniciar primeira se√ß√£o
  getStartSectionMessage() {
    const currentSection = this.SECTIONS[0];
    return `‚úÖ **DOCUMENTOS PROCESSADOS COM SUCESSO**

Agora iniciaremos a elabora√ß√£o sequencial da r√©plica.

**${currentSection.title}**
${currentSection.description}

**Requisitos desta se√ß√£o:**
${currentSection.requirements.map(req => `‚Ä¢ ${req}`).join('\n')}

**Caracter√≠sticas t√©cnicas:**
‚Ä¢ M√≠nimo: ${currentSection.minTokens} tokens
‚Ä¢ M√°ximo: ${currentSection.maxTokens} tokens
‚Ä¢ Nomes em MAI√öSCULAS
‚Ä¢ Linguagem t√©cnica e formal

Voc√™ confirma o in√≠cio da elabora√ß√£o da **primeira se√ß√£o (${currentSection.title})**?

**Digite "CONFIRMAR" para prosseguir** ou "ALTERAR" se precisar modificar documentos.`;
  }

  // Processar confirma√ß√£o do usu√°rio
  processUserConfirmation(userInput, currentSection) {
    const input = userInput.toLowerCase().trim();
    
    if (input === 'confirmar') {
      return {
        confirmed: true,
        action: 'generate_section',
        message: `Iniciando elabora√ß√£o da se√ß√£o ${currentSection + 1}: ${this.SECTIONS[currentSection].title}...`
      };
    } else if (input === 'alterar') {
      return {
        confirmed: false,
        action: 'modify_documents',
        message: 'Voc√™ pode anexar documentos adicionais ou substituir os existentes.'
      };
    } else {
      return {
        confirmed: false,
        action: 'request_confirmation',
        message: `Por favor, digite **"CONFIRMAR"** para iniciar a elabora√ß√£o da se√ß√£o ou **"ALTERAR"** para modificar documentos.

**Se√ß√£o atual:** ${this.SECTIONS[currentSection].title}`
      };
    }
  }

  // Gerar prompt para se√ß√£o espec√≠fica
  generateSectionPrompt(sectionIndex) {
    const section = this.SECTIONS[sectionIndex];
    const documents = this.workflowState.documentsContent;
    const classifiedDocs = this.workflowState.classifiedDocuments;
    
    if (!documents || documents.length === 0) {
      console.warn('‚ö†Ô∏è Nenhum documento dispon√≠vel para o prompt');
      return 'Erro: Nenhum documento foi processado para elaborar a r√©plica.';
    }

    let documentsText = '';
    if (documents && documents.length > 0) {
      documentsText = documents.map((doc, index) => 
        `=== DOCUMENTO ${index + 1}: ${doc.name} ===\nTIPO: ${doc.fileType?.toUpperCase() || 'TXT'}\nTAMANHO: ${Math.round(doc.content?.length / 1000) || 0}k caracteres\n\nCONTE√öDO COMPLETO:\n${doc.content}\n\n`
      ).join('');
    }

    // Extrair fatos espec√≠ficos dos documentos para o prompt
    const specificFacts = this.extractSpecificFacts(documents);

    // Informa√ß√µes sobre classifica√ß√£o dos documentos
    let classificationInfo = '';
    if (classifiedDocs) {
      classificationInfo = `
**AN√ÅLISE DOS DOCUMENTOS ANEXADOS:**
‚Ä¢ Peti√ß√µes iniciais: ${classifiedDocs.petition.length} documento(s)
‚Ä¢ Contesta√ß√µes/Defesas: ${classifiedDocs.contestation.length} documento(s)  
‚Ä¢ Provas/Anexos: ${classifiedDocs.evidence.length} documento(s)
‚Ä¢ Outros documentos: ${classifiedDocs.others.length} documento(s)
‚Ä¢ **TOTAL: ${documents.length} documento(s) para an√°lise conjunta**
`;
    }

    const prompt = `Voc√™ √© um assistente jur√≠dico especializado em elabora√ß√£o de r√©plicas processuais.

**IMPORTANTE: ELABORE CONTE√öDO COMPLETO E ESPEC√çFICO, N√ÉO APENAS ESTRUTURA OU MODELO**

**TAREFA:** Elaborar EXCLUSIVAMENTE a se√ß√£o "${section.title}" da r√©plica COM CONTE√öDO COMPLETO baseado nos documentos anexados.

**SE√á√ÉO ATUAL:** ${section.title}
**DESCRI√á√ÉO:** ${section.description}

**FATOS ESPEC√çFICOS IDENTIFICADOS:**
${specificFacts}

**REQUISITOS OBRIGAT√ìRIOS PARA ESTA SE√á√ÉO:**
${section.requirements.map(req => `‚Ä¢ ${req}`).join('\n')}

**ESPECIFICA√á√ïES T√âCNICAS:**
‚Ä¢ Extens√£o: Entre ${section.minTokens} e ${section.maxTokens} tokens
‚Ä¢ TODOS os nomes de pessoas f√≠sicas e jur√≠dicas em MAI√öSCULAS
‚Ä¢ Linguagem t√©cnica e formal
‚Ä¢ Base-se EXCLUSIVAMENTE nos documentos fornecidos
‚Ä¢ N√ÉO usar jurisprud√™ncia gen√©rica
‚Ä¢ N√ÉO antecipar conte√∫do de outras se√ß√µes
‚Ä¢ ELABORAR CONTE√öDO SUBSTANTIVO, N√ÉO APENAS ESTRUTURA

**ESTRUTURA ESPERADA:**
${section.title}

[CONTE√öDO COMPLETO E DETALHADO DA SE√á√ÉO BASEADO NOS DOCUMENTOS]

${classificationInfo}

**TODOS OS DOCUMENTOS ANEXADOS:**
${documentsText}

**INSTRU√á√ïES CR√çTICAS:**
‚Ä¢ Analise TODOS os ${documents.length} documentos em conjunto
‚Ä¢ Use informa√ß√µes ESPEC√çFICAS dos documentos (nomes, valores, datas, fatos)
‚Ä¢ Cross-reference informa√ß√µes entre os documentos
‚Ä¢ Identifique contradi√ß√µes ou complementaridades
‚Ä¢ Priorize informa√ß√µes da contesta√ß√£o para refuta√ß√£o
‚Ä¢ Use provas e anexos para fundamentar argumentos
‚Ä¢ ELABORE TEXTO COMPLETO, N√ÉO APENAS T√ìPICOS OU ESTRUTURA
‚Ä¢ Seja ESPEC√çFICO com base nos fatos dos documentos

**CR√çTICO:** Elabore CONTE√öDO COMPLETO E SUBSTANTIVO para a se√ß√£o "${section.title}", baseado nos fatos espec√≠ficos dos documentos anexados. N√ÉO retorne apenas estrutura, modelo ou t√≥picos.

Elabore agora a se√ß√£o "${section.title}" COM CONTE√öDO COMPLETO:`;

    console.log('üìù Prompt gerado:', {
      sectionTitle: section.title,
      promptLength: prompt.length,
      documentsIncluded: documents.length,
      hasSpecificFacts: specificFacts.length > 100,
      hasDocumentsText: documentsText.length > 100
    });

    return prompt;
  }

  // M√©todo auxiliar para extrair fatos espec√≠ficos dos documentos
  extractSpecificFacts(documents) {
    if (!documents || documents.length === 0) return 'Nenhum fato espec√≠fico identificado.';
    
    let facts = [];
    
    documents.forEach((doc, index) => {
      const content = doc.content.toLowerCase();
      
      // Extrair valores monet√°rios
      const moneyRegex = /r\$\s*[\d.,]+/g;
      const moneyMatches = doc.content.match(moneyRegex);
      if (moneyMatches) {
        facts.push(`Valores: ${moneyMatches.join(', ')}`);
      }
      
      // Extrair nomes (palavras em mai√∫sculas)
      const nameRegex = /[A-Z][A-Z\s]+(?=\s|,|\.)/g;
      const nameMatches = doc.content.match(nameRegex);
      if (nameMatches) {
        const cleanNames = nameMatches.filter(name => name.length > 3 && name.length < 50);
        if (cleanNames.length > 0) {
          facts.push(`Pessoas: ${cleanNames.slice(0, 5).join(', ')}`);
        }
      }
      
      // Extrair datas
      const dateRegex = /\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}\s+de\s+\w+\s+de\s+\d{4}/g;
      const dateMatches = doc.content.match(dateRegex);
      if (dateMatches) {
        facts.push(`Datas: ${dateMatches.slice(0, 3).join(', ')}`);
      }
      
      // Identificar tipo de documento
      if (content.includes('peti√ß√£o') || content.includes('inicial')) {
        facts.push(`Documento ${index + 1}: Peti√ß√£o inicial`);
      } else if (content.includes('contesta√ß√£o') || content.includes('defesa')) {
        facts.push(`Documento ${index + 1}: Contesta√ß√£o/Defesa`);
      } else {
        facts.push(`Documento ${index + 1}: ${doc.name}`);
      }
    });
    
    return facts.length > 0 ? facts.join('\n‚Ä¢ ') : 'An√°lise autom√°tica n√£o identificou fatos espec√≠ficos.';
  }

  // Validar conte√∫do da se√ß√£o
  validateSectionContent(content, sectionIndex) {
    const section = this.SECTIONS[sectionIndex];
    const errors = [];
    const warnings = [];

    // Verificar extens√£o (aproxima√ß√£o por contagem de caracteres)
    const approximateTokens = content.length / 4; // Aproxima√ß√£o rudimentar
    if (approximateTokens < section.minTokens * 0.8) {
      errors.push(`Se√ß√£o muito curta. M√≠nimo esperado: ~${section.minTokens} tokens`);
    }
    if (approximateTokens > section.maxTokens * 1.2) {
      warnings.push(`Se√ß√£o muito extensa. M√°ximo recomendado: ~${section.maxTokens} tokens`);
    }

    // Verificar se cont√©m o t√≠tulo da se√ß√£o
    if (!content.includes(section.title)) {
      errors.push(`T√≠tulo da se√ß√£o "${section.title}" n√£o encontrado no conte√∫do`);
    }

    // Verificar se nomes est√£o em mai√∫sculas (busca por padr√µes comuns)
    const lowercaseNames = content.match(/\b[a-z]+\s+[a-z]+\s+[a-z]+\b/g);
    if (lowercaseNames && lowercaseNames.length > 3) {
      warnings.push('Poss√≠veis nomes pr√≥prios em min√∫sculas detectados. Verifique se todos os nomes est√£o em MAI√öSCULAS');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  // Avan√ßar para pr√≥xima se√ß√£o
  advanceToNextSection() {
    this.workflowState.currentSection++;
    
    if (this.workflowState.currentSection >= this.SECTIONS.length) {
      return {
        completed: true,
        phase: 'completion',
        message: this.getCompletionMessage()
      };
    }

    const nextSection = this.SECTIONS[this.workflowState.currentSection];
    return {
      completed: false,
      phase: 'section_confirmation',
      message: this.getSectionConfirmationMessage(nextSection),
      currentSection: this.workflowState.currentSection
    };
  }

  // Mensagem de confirma√ß√£o para pr√≥xima se√ß√£o
  getSectionConfirmationMessage(section) {
    return `‚úÖ **SE√á√ÉO ANTERIOR CONCLU√çDA**

Agora elaboraremos a pr√≥xima se√ß√£o:

**${section.title}**
${section.description}

**Requisitos desta se√ß√£o:**
${section.requirements.map(req => `‚Ä¢ ${req}`).join('\n')}

**Caracter√≠sticas t√©cnicas:**
‚Ä¢ M√≠nimo: ${section.minTokens} tokens
‚Ä¢ M√°ximo: ${section.maxTokens} tokens
‚Ä¢ Nomes em MAI√öSCULAS
‚Ä¢ Linguagem t√©cnica e formal

Voc√™ confirma o in√≠cio da elabora√ß√£o da **${section.title}**?

**Digite "CONFIRMAR" para prosseguir** ou "REVISAR" para ver se√ß√£o anterior.`;
  }

  // Mensagem de conclus√£o
  getCompletionMessage() {
    return `üéâ **R√âPLICA COMPLETA - PROCESSO FINALIZADO**

Todas as 4 se√ß√µes obrigat√≥rias foram elaboradas com sucesso:

‚úÖ **I ‚Äì DO RELAT√ìRIO**
‚úÖ **II ‚Äì DOS PONTOS CONTROVERTIDOS**
‚úÖ **III ‚Äì DA REFUTA√á√ÉO DOS ARGUMENTOS DA CONTESTA√á√ÉO**
‚úÖ **IV ‚Äì DOS PEDIDOS**

**Pr√≥ximos passos:**
1. Revisar todo o documento elaborado
2. Verificar adequa√ß√£o aos requisitos processuais
3. Ajustar formata√ß√£o final se necess√°rio
4. Proceder com protocoliza√ß√£o

A r√©plica foi elaborada seguindo rigorosamente as especifica√ß√µes t√©cnicas e os requisitos legais estabelecidos.

**Documento pronto para revis√£o final.**`;
  }

  // Obter estado atual do fluxo
  getCurrentState() {
    return {
      ...this.workflowState,
      currentSectionInfo: this.SECTIONS[this.workflowState.currentSection] || null,
      totalSections: this.SECTIONS.length,
      progress: (this.workflowState.completedSections.length / this.SECTIONS.length) * 100
    };
  }

  // Reiniciar fluxo
  resetWorkflow() {
    return this.initializeWorkflow();
  }
}

// Inst√¢ncia singleton do servi√ßo
export const replicaWorkflowService = new ReplicaWorkflowService();

// Fun√ß√£o utilit√°ria para verificar se um prompt √© de r√©plica
export const isReplicaPrompt = (promptId, promptName) => {
  const id = (promptId || '').toLowerCase();
  const name = (promptName || '').toLowerCase();
  
  return id.includes('replica') || name.includes('r√©plica') || name.includes('replica');
};

// Fun√ß√£o para detectar se o chat deve usar o fluxo de r√©plica
export const shouldUseReplicaWorkflow = (promptType) => {
  return isReplicaPrompt(promptType?.id, promptType?.name);
};
